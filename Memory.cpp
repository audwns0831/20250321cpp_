#include <iostream>

using namespace std;

int main_memory() {
	
	/*
	* <C스타일 동적할당>
	* malloc 함수를 통해 원하는 크기의 메모리를 할당받으며, 메모리 주소를 반환받음
	* free 함수를 통해 반납해야하는 메모리 주소를 지정함
	*/

	// 동적할당
	//int* intPtr = (int*)malloc(sizeof(int));
	//char* charPtr = (char*)malloc(sizeof(char));
	//void* ptr = malloc(100);

	//// 메모리 반납
	//free(intPtr);
	//free(charPtr);
	//free(ptr);

	//// c++ 동적할당
	//int* intPtr = new int;
	//char* charPtr = new char;

	//// 메모리 반납
	//delete intPtr;
	//delete charPtr;

	//// <안전한 메모리 반납>
	//int* ptr1 = new int;
	//delete ptr1;
	//// delete ptr1; // error : 이미 반납한 메모리를 반납할 수 없음

	//int* ptr2 = new int;
	//
	////1
	//delete ptr2;

	////2
	//ptr2 = nullptr;		// 메모리 반납 후 포인터 변수를 nullptr로 설정하여 메모리를 가리키지 않도록 설정
	//delete ptr2;		// nullptr을 반납하려 하는 경우는 아무일도 일어나지 않음

	//int* intPtr = new int;

	//// 동적할당 받은 메모리를 사용할 수 있는 구간

	//delete intPtr;

	//int count;
	//cout << "배열의 길이를 입력하세요. : ";
	//cin >> count;
	//int* arr = new int[count];

	//for (int i = 0; i < count; i++) {
	//	arr[i] = i;
	//}

	//for (int i = 0; i < count; i++) {
	//	cout << arr[i] << " ";
	//}

	//delete[] arr;



	//int num = 10;
	//Func(num);


	return 0;
}


/*
* 메모리 (Memory)
* 프로그램을 처리하기 위해 필요한 정보를 저장하는 기억장치
* 프로그램은 메모리에 저장한 정보를 토대로 명령들을 수행함
*/

/*
* 메모리구조
* 프로그램은 효율적인 메모리 관리를 위해 메모리 영역을 구분
* 데이터는 각 역할마다 저장되는 영역을 달리하여 접근범위,  생존범위 등을 관리
*/

/*
* <메모리 구조>
* (0x0000...)	+-------------------+
* 낮은주소		|	코드영역		| => 실행할 프로그램의 코드
*				+-------------------+
*				|	데이터영역		| => 전역변수, 정적변수
*				+-------------------+
*				|	힙 영역			| => 사용자의 동적 할당 (new, malloc, delete)
*				+-------------------+
*				|					|
*				+-------------------+
* 높은주소		|	스택영역		| => 지역변수, 매개변수
* (0xFFFF...)	+-------------------+
*/

/*
* <코드 영역>
* 프로그램이 실행할 코드가 저장되는 영역
* 데이터가 변경되지 않은 읽기 전용 데이터
*/

/*
* <데이터 영역>
* 전역변수와 정적변수가 저장되는 영역
* 프로그램의 시작시 할당되며 종료시 삭제됨
*/

/*
* <스택 영역>
* 지역변수(local value)와 매개변수(parameter)가 저장되는 영역
* 함수의 호출시 할당되며 종료시 삭제됨
*/
//void Test(int num) {
//	float data = 3.0f;
//
//	cout << num << endl;
//	cout << data << endl;
//} // num 소멸 data 소멸

/*
* <힙 영역>
* 사용자의 동적할당 메모리가 저장되는 영역
* 사용자가 프로그램 런타임 당시 요청으로 할당되며 반납으로 삭제됨
*/

/*
* <변수의 접근범위와 생존범위>
*				|	메모리영역		접근범위		생존범위
* --------------+----------------------------------------------
* 전역변수		|	데이터영역		모든			프로그램 시작에서 끝까지
* --------------+----------------------------------------------
* 정적변수		|	데이터영역		블록 내부		프로그램 시작에서 끝까지
* --------------+----------------------------------------------
* 지역변수		|	스택영역		블록 내부		블록 시작에서 끝까지
* 매개변수		|
* --------------+----------------------------------------------
* 사용자의		|	힙영역			포인터 변수		사용자의 할당부터 반납까지(메모리 누수)
* 동적할당		|
*/

/*
* <지역변수와 매개변수>
* 블록 시작에서 끝까지 데이터가 유지됨
* 블록 내부에서만 접근이 가능
*/
//void Func1(int param) {
//	int value;
//
//	value;	// 지역변수 접근 가능
//	param;	// 매개변수 접근 가능
//}
//
//void Main1() {
//	Func1(2);
//	// value;	// 지역변수 접근 불가
//	// param;	// 매개변수 접근 불가
//}
//
///*
//* <전역변수와 정적변수>
//* 공통점 : 프로그램 시작에서 끝까지 데이터가 유지됨
//* 차이점 : 전역변수(모든구역에서 접근가능), 정적변수(블록 내부에서 접근 가능)
//*/
//
//int g_value = 0;
//void Func2() {
//	static int s_value = 0;
//	int l_value = 0;
//
//	cout << "  전역변수 : " << g_value++
//		<< ", 정적변수 : " << s_value++
//		<< ", 지역변수 : " << l_value++ << endl;
//}
//
//void Main2() {
//	g_value;	// 전역변수 접근가능
//	// s_value;	// 정적변수 접근불가
//	Func2();	// 전역변수 : 0, 정적변수 : 0, 지역변수 : 0
//	Func2();	// 전역변수 : 1, 정적변수 : 1, 지역변수 : 0
//	Func2();	// 전역변수 : 2, 정적변수 : 2, 지역변수 : 0
//}
//
///*
//* 함수호출스택
//* 함수 호출과 종료에 연관되는 데이터를 저장하는 방법
//* 프로그램은 스택구조를 통해 함수에서 사용한 ㅔ이터들을 효율적으로 관리함
//*/
//
//// <함수호출스택>
//void Stack2() {}
//void Stack1() { Stack2(); }
//
//void Main3() {
//	Stack1();
//}
//
///*
//* <스택 오버플로우>
//* 함수가 무한히 반복되거나 너무 많은 메모리를 사용하는 경우 스택영역에 빈공간이 부족
//* 스택영역을 벗어나 함수호출스택이 늘어나는 경우 스택 오버플로우 발생
//*/
//
//void Func4() {
//	Func4();
//}
//
//void Main4() {
//	Func4();	// 함수호출스택이 늘어나다 스택영역이 넘치는 경우 스택오버플로우 발생
//}

/*
* 동적할당 (Dynamic Allocate)
* 런타임 당시 사용자가 사용할 메모리 공간을 할당받는 방법
* 사용이 끝나면 사용자가 사용한 메모리 공간을 반납해야함
*/

/*
* <C스타일 동적할당>
* malloc 함수를 통해 원하는 크기의 메모리를 할당받으며, 메모리 주소를 반환받음
* free 함수를 통해 반납해야하는 메모리 주소를 지정함
*/
